#+PROPERTY: LOGGING nil

* Checklists

** Release template

+  [ ] Lint
+  [ ] Update version numbers
     -  [ ] =org-recent-headings.el=
     -  [ ] =helm-org-recent-headings.el=
     -  [ ] =README.org=

* Ideas

** DONE Frecency
CLOSED: [2017-09-19 Tue 17:35]
:LOGBOOK:
-  State "DONE"       from "UNDERWAY"   [2017-09-19 Tue 17:35]
-  State "UNDERWAY"   from "TODO"       [2017-08-30 Wed 08:09]
:END:

*** DONE Frecency library
:PROPERTIES:
:ID:       cc8bab6b-51db-4277-983b-f2db0394eafb
:END:

Maybe the thing to do is make a frecency library.

*** TODO Variable for number of days to protect an entry from expiration

Potential problem with this is that the number could grow very large very quickly and then take a very long time to decay.  For example, if the number were increased by 14 (2 weeks) every time a heading was accessed, an entry that was accessed 3 times in a day would suddenly take 6 weeks to decay to normal.

*** TODO Add day number to plist

*** TODO Sort by day number first

*** TODO Decay day number when saving list

** TODO [#A] Filters

e.g. I generally only want files from =~/org= to be included.

** TODO List view using tabulated-list-mode

with sortable columns, etc.

And/or make one for =org-bookmark-heading=, or maybe one that shows both.

** TODO Advice can conflict

For example:

#+BEGIN_EXAMPLE
org-tree-to-indirect-buffer is an interactive compiled Lisp function
in
‘~/.homesick/repos/emacs.d/emacs.d/elpa/org-plus-contrib-20170210/org.el’.

(org-tree-to-indirect-buffer &optional ARG)

:after advice: ‘ap/org-rename-tree-to-indirect-buffer’
:override advice: ‘ap/org-tree-to-indirect-buffer’
:after advice: ‘org-recent-headings--store-heading’
#+END_EXAMPLE

The advices conflict and =org-recent-headings--store-heading= isn't being called.  Not sure how to fix this without modifying Org itself.

** MAYBE Use [[https://github.com/raxod502/prescient.el/issues/8#event-1674211530][prescient]]?

It would be worth trying its sorting; maybe it's better than ~frecency~'s.  But even if not, it does handle persisting data better than we do, and better than ~savehist~ does.

** UNDERWAY [#A] Store outline path instead of regexp
:PROPERTIES:
:ID:       5ef62ed6-42d9-4aaf-a279-6a9548fd162b
:END:

Seems like it would make more sense to store the outline path instead of the regexp.  The regexp bakes in the current todo keywords, and if those change...  Then I can use =org-find-olp= to go to it.

[2019-01-14 Mon 19:54]  Finally merged this to master.  Remaining is to remove the regexp code eventually.

** TODO Optionally include to-do keyword in formatted string

** Use-case?
:PROPERTIES:
:ID:       d203e070-2416-47e3-9d8d-cf3bbd15692d
:END:

I had this idea, but now I'm not exactly sure what it was, and I'm not sure how it would compare to or interact with the last-capture/last-stored functions/bookmarks.

Maybe it would be useful as a general heading/entry cache that could store headings whenever you do certain actions, like jump to a heading, tag it, change todo status, clock in/out, etc.  Maybe a list of functions could be stored and all of those functions could be advised with =:after=, and it could store whatever heading the point is in.  This would make it really flexible.  There could also be different lists for different kinds of advice.

[2016-04-20 Wed 22:58] Ah, here is something I wrote down in my idea item:

#+BEGIN_QUOTE
[2016-03-18 Fri 00:31] I could hook some of [[file:~/.homesick/repos/emacs.d/emacs.d/elpa/helm-20160211.934/helm-org.el::(defcustom%20helm-org-headings-actions][these actions]], as well as the org-refile functions, and store the headings in a list, and then make a helm source that pulls from that list, and put that in my C-tab command.
#+END_QUOTE

** Storing heading positions
:LOGBOOK:
CLOCK: [2017-03-29 Wed 04:59]--[2017-03-29 Wed 05:27] =>  0:28
:END:

I need a way to store the position of recent headings and jump to them.  There are a few possibilities:

1. Use org-ids.  I'd rather not do this, because not everyone (including myself) would want every heading to get an org-id.
2. Use heading name.  This might work, but if there's more than one heading with the same name, it wouldn't work.
3. Use markers.  This should work, I think, but if the number of markers in a large file added up over time, I'm not sure if that would cause Emacs to slow down when editing the file.  I guess I could sort-of garbage-collect ones past a certain number, but that seems messy.  Also, this wouldn't persist between Emacs sessions, unless I also restored those when Org files are loaded, which would be /really/ messy, so that's a no.
4. Use heading path.  This seems like the best idea, because it would persist across sessions, and handle headings with the same name.  It wouldn't handle refiled headings, but then again, we could advise the refile function and add refiled headings to the list.  The only problem is that there doesn't seem to be a way to go to a heading using the outline path.  Surely there is a way...surely I won't have to write my own function for that...

[2017-03-29 Wed 04:59] Let's see if I can find a function to go to a node using an outline path.  I know that =org-capture= can do this...

[2017-03-29 Wed 05:08] Looks like =org-find-olp= is the function to use.  But I should probably look into how the =org-refile-cache= works, although that seems like diving into a rabbit hole...

[2017-03-29 Wed 05:11] =org-refile-cache= is a simple list of cons, as seen in the [[file:/usr/share/emacs24/site-lisp/org-mode/org.el::(defun%20org-refile-cache-put%20(set%20&rest%20identifiers)][put function]].  But I don't even have that option enabled, I guess because:

#+BEGIN_QUOTE
   The cache for a particular file will be updated automatically when the buffer has been killed, or when any of the marker used for flagging refile targets no longer points at a live buffer.  If you have added new entries to a buffer that might themselves be targets, you need to clear the cache manually...
#+END_QUOTE

Which means that as I edit a file, the cache will become out-of-date.  But I should give it a try, because using the refile interface is pretty slow sometimes...so I'll turn it on...

** org-refile-cache-put

This might be a better way, or might be useful for integration or inspiration.

I should probably look at how it stores its cache.


[2017-04-15 Sat 13:59] I'm basically copying how it works: use =org-complex-heading-regexp-format= to build a regexp that matches the heading, store that in a list with the file path and a string for displaying in completion.

* Bugs

** TODO [#A] Set ~print-level~ and ~print-length~ variables when printing (or use ~persist~)

If these variables get set in a session, it can cause values in the list to be elided with ~...~, which causes very weird errors later and requires wiping out the list.

** UNDERWAY List shrinks inexplicably
:PROPERTIES:
:ID:       522b4f8e-84ee-450a-9656-f36d18118724
:END:

[2018-06-12 Tue 09:22]  For a while now I've been noticing that the list seems to randomly shrink.  At the moment it only has 14 entries, yesterday it was in the 40s, and I don't think I've ever seen it even approach the configured limit.  I'm guessing it has something to do with restarting Emacs, having multiple sessions conflicting with each other and overwriting the file, but I'm not sure that can explain how it would shrink like this.  I could understand new entries disappearing, the list not growing, but I don't think that explains it shrinking.

Maybe using something like =prescient.el='s persistence features would help the problem.

The first thing I'm going to do is write a function to present the entries in the list with human-readable dates, sorted by date, so I can try to discern if there's a pattern.  Looking at the entries in the list at the moment, I see some from yesterday, and some from weeks ago, which just makes no sense.

#+BEGIN_SRC elisp
  (defun orh-human ()
    (interactive)
    (cl-labels ((newest-ts (entry)
                           (car (sort (plist-get (cdr entry) :frecency-timestamps) #'>)))
                (entry> (a b)
                        (> (newest-ts a) (newest-ts b)))
                (format-date (date)
                             (format-time-string "%F %T" date)))
      (with-current-buffer (pop-to-buffer (get-buffer-create "*orh-human*"))
        (emacs-lisp-mode)
        (erase-buffer)
        (pp (--> org-recent-headings-list
                 (-sort #'entry> it)
                 (--map (a-list :dates (--map (format-date it)
                                              (-sort #'> (plist-get (cdr it) :frecency-timestamps)))
                                (a-list :file (plist-get (car it) :file)
                                        :olp (plist-get (car it) :outline-path)))
                        it))
            (current-buffer))
        (goto-char 1))))

  (orh-human)
#+END_SRC

[2018-06-12 Tue 09:47]  While writing and testing that I somehow shrank the list to one element!  I'm not sure what is happening, but it might be caused by =sort=, which can (does?) sort destructively (although I don't know why that would /shrink/ the list).

[2018-06-12 Tue 09:58]  Changed the sorting function to use ~-sort~ and copied it into my config, will wait and see if it seems to make any difference.


[2019-01-14 Mon 19:43]  Notes/code moved out of source:

#+BEGIN_SRC elisp
  (defun org-recent-headings--prepare-list ()
    "Sort and trim `org-recent-headings-list'."
    ;; (frecency-sort org-recent-headings-list
    ;;                :get-fn (lambda (item key)
    ;;                          (plist-get (cdr item) key)))

    ;; [2018-06-12 Tue 09:49] Going to try sorting with -sort, which is not destructive.  Maybe it
    ;; will fix this weird problem with the list shrinking.

    ;; [2018-07-15 Sun 15:20] Been using it for a while now, and I think that may have fixed the
    ;; problem.  The list is currently at 188 entries.  But I wonder if I could also fix it by either
    ;; using (setq org-recent-headings-list (frecency-sort...)) or by making frecency-sort
    ;; non-destructive (which I'm not sure would be a good idea, because there is at least one other
    ;; package using it, so maybe I'd need to check with the author).

    ;; (setq org-recent-headings-list (-sort (-on #'>
    ;;                                            (lambda (item)
    ;;                                              (frecency-score item :get-fn (lambda (item key)
    ;;                                                                             (plist-get (cdr item) key)))))
    ;;                                       org-recent-headings-list))

    ;; [2018-07-29 Sun 12:58] That seems to work fine, so now I'm going to try using `frecency-sort'
    ;; with `setq'.  If that works it would probably be best.  ...  It seems to work correctly at the
    ;; moment: when I run this function, the list is preserved.  But I think I will test it for a bit
    ;; before assuming it's completely working.

    ;; (setq org-recent-headings-list (frecency-sort org-recent-headings-list
    ;;                                               :get-fn (lambda (item key)
    ;;                                                         (plist-get (cdr item) key))))

    ;; [2019-01-14 Mon 19:41] I'm not convinced that "(setq org-recent-headings-list (frecency-sort ..."
    ;; is working properly.  The list does not seem to be growing up to the limit.  That might indicate
    ;; a bug in `frecency-sort'.  So since "(setq ... (-sort ..."  does seem to work properly, I'm going
    ;; to use it for now.
     (org-recent-headings--trim))
#+END_SRC

*** Code for debugging

#+BEGIN_SRC elisp
  ;; Print entries sorted by score
  (cl-sort (--map (list (frecency-score (cdr it) :get-fn #'plist-get)
                        (substring-no-properties (plist-get (cdr it) :display)))
                  org-recent-headings-list)
           #'> :key (lambda (it)
                      (car it)))
#+END_SRC

* Profiling

** org-find-olp replacement

#+BEGIN_SRC elisp :results silent
  (defun org-olp-marker (olp &optional this-buffer unique)
    "Return a marker pointing to outline path OLP.
  Return nil if not found.  If THIS-BUFFER, search current buffer;
  otherwise search file found at path in first element of OLP.  If
  UNIQUE, display a warning if OLP points to multiple headings."
    ;; NOTE: Disabling `case-fold-search' is important to avoid voluntary hair loss.
    (let* ((case-fold-search nil)
           (file (unless this-buffer
                   (pop olp)))
           (buffer (if this-buffer
                       (current-buffer)
                     (or (find-file-noselect file)
                         (error "File in outline path not found: %s" file)))))
      (cl-labels ((find-at (level headings)
                           (let ((re (rx-to-string `(seq bol (repeat ,level "*") (1+ blank)
                                                         (optional (1+ upper) (1+ blank)) ; To-do keyword
                                                         (optional "[#" (in "ABC") "]" (1+ blank)) ; Priority
                                                         ,(car headings) (0+ blank) (or eol ":")))))
                             (when (re-search-forward re nil t)
                               (when (and unique (save-excursion
                                                   (save-restriction
                                                     (when (re-search-forward re nil t)
                                                       (if (cdr headings)
                                                           (find-at (1+ level) (cdr headings))
                                                         t)))))
                                 (display-warning 'org-recent-headings
                                                  (format "Multiple headings found in %S for outline path: %S" (current-buffer) olp)
                                                  :warning))
                               (if (cdr headings)
                                   (progn
                                     (org-narrow-to-subtree)
                                     (find-at (1+ level) (cdr headings)))
                                 (copy-marker (point-at-bol)))))))
        (with-current-buffer buffer
          (org-with-wide-buffer
           (goto-char (point-min))
           (find-at 1 olp))))))

  (defun org-olp-marker* (olp &optional this-buffer unique)
    ;; NOTE: This version uses `org-complex-heading-regexp-format'.
    "Return a marker pointing to outline path OLP.
  Return nil if not found.  If THIS-BUFFER, search current buffer;
  otherwise search file found at path in first element of OLP.  If
  UNIQUE, display a warning if OLP points to multiple headings."
    ;; NOTE: Disabling `case-fold-search' is important to avoid voluntary hair loss.
    (let* ((case-fold-search nil)
           (file (unless this-buffer
                   (pop olp)))
           (buffer (if this-buffer
                       (current-buffer)
                     (or (find-file-noselect file)
                         (error "File in outline path not found: %s" file)))))
      (cl-labels ((find-at (level headings)
                           (let ((re (format org-complex-heading-regexp-format (regexp-quote (car headings)))))
                             (when (re-search-forward re nil t)
                               (when (and unique (save-excursion
                                                   (save-restriction
                                                     (when (re-search-forward re nil t)
                                                       (if (cdr headings)
                                                           (find-at (1+ level) (cdr headings))
                                                         t)))))
                                 (display-warning 'org-recent-headings
                                                  (format "Multiple headings found in %S for outline path: %S" (current-buffer) olp)
                                                  :warning))
                               (if (cdr headings)
                                   (progn
                                     (org-narrow-to-subtree)
                                     (find-at (1+ level) (cdr headings)))
                                 (copy-marker (point-at-bol)))))))
        (with-current-buffer buffer
          (org-with-wide-buffer
           (goto-char (point-min))
           (find-at 1 olp))))))
#+END_SRC

#+BEGIN_SRC elisp
  (let* ((content "* Text before [[Test heading]] Text after 1

  blah blah
  ,** Text before [[Test heading]] Text after 2

  foo bar
  ,*** Text before [[Test heading]] Text after 3

  buzz

  ")
         (olp '("Text before [[Test heading]] Text after 1"
                "Text before [[Test heading]] Text after 2"
                "Text before [[Test heading]] Text after 3")))
    (with-temp-buffer
      (org-mode)
      (dotimes (_ 2000)
        (insert "* Heading 1
  text
  ,** Heading 2
  text
  ,*** Heading 3
  text
  "))
      (insert content)
      (bench-multi-lexical :times 500 :ensure-equal t
        :forms (("org-find-olp" (org-find-olp olp t))
                ("org-olp-marker" (org-olp-marker olp t t))
                ("org-olp-marker*" (org-olp-marker* olp t t))))))
#+END_SRC

#+RESULTS:
| Form            | x faster than next | Total runtime | # of GCs | Total GC runtime |
|-----------------+--------------------+---------------+----------+------------------|
| org-olp-marker  |               2.66 |      0.857414 |        0 |                0 |
| org-olp-marker* |               1.29 |      2.283076 |        0 |                0 |
| org-find-olp    |            slowest |      2.946619 |        0 |                0 |

*** Profile

I don't know why the =rx-to-string= version seems so much faster than the =format= version, because according to =elp-profile=, they both call =format= the same number of times!

#+BEGIN_SRC elisp
  (let* ((content "* Text before [[Test heading]] Text after 1

  blah blah
  ,** Text before [[Test heading]] Text after 2

  foo bar
  ,*** Text before [[Test heading]] Text after 3

  buzz

  ")
         (olp '("Text before [[Test heading]] Text after 1"
                "Text before [[Test heading]] Text after 2"
                "Text before [[Test heading]] Text after 3")))
    (with-temp-buffer
      (org-mode)
      (dotimes (_ 2000)
        (insert "* Heading 1
  text
  ,** Heading 2
  text
  ,*** Heading 3
  text
  "))
      (insert content)
      (elp-profile 10 '(org- format)
        (org-find-olp olp t))))
#+END_SRC

#+RESULTS:
| Function            | Times called |   Total time | Average time |
|---------------------+--------------+--------------+--------------|
| org-find-olp        |           10 | 0.0585817379 | 0.0058581738 |
| format              |         2485 | 0.0013825340 | 5.563...e-07 |
| org-end-of-subtree  |           30 |  0.000413749 | 1.379...e-05 |
| org-outline-level   |           30 | 0.0001179070 | 3.930...e-06 |
| org-back-to-heading |           30 |   8.4231e-05 |   2.8077e-06 |
| org-at-heading-p    |           10 |   1.7301e-05 |   1.7301e-06 |

#+BEGIN_SRC elisp
  (let* ((content "* Text before [[Test heading]] Text after 1

  blah blah
  ,** Text before [[Test heading]] Text after 2

  foo bar
  ,*** Text before [[Test heading]] Text after 3

  buzz

  ")
         (olp '("Text before [[Test heading]] Text after 1"
                "Text before [[Test heading]] Text after 2"
                "Text before [[Test heading]] Text after 3")))
    (with-temp-buffer
      (org-mode)
      (dotimes (_ 2000)
        (insert "* Heading 1
  text
  ,** Heading 2
  text
  ,*** Heading 3
  text
  "))
      (insert content)
      (elp-profile 10 '(org- format regexp-)
        (org-olp-marker olp t t))))
#+END_SRC

#+RESULTS:
| Function                       | Times called |   Total time | Average time |
|--------------------------------+--------------+--------------+--------------|
| org-olp-marker                 |           10 |  0.017993684 | 0.0017993684 |
| format                         |         2521 | 0.0012155610 | 4.821...e-07 |
| org-narrow-to-subtree          |           20 |  0.000768391 | 3.841955e-05 |
| org-end-of-subtree             |           20 |  0.000255749 | 1.278...e-05 |
| org-get-limited-outline-regexp |           20 |  0.000201603 | 1.008...e-05 |
| org-back-to-heading            |           40 | 0.0001385600 | 3.464...e-06 |
| org-outline-level              |           20 | 8.297...e-05 | 4.148...e-06 |
| regexp-quote                   |          150 | 7.139...e-05 | 4.759...e-07 |
| org-at-heading-p               |           20 |   3.2506e-05 |   1.6253e-06 |
| org-with-wide-buffer           |           10 |    5.782e-06 |    5.782e-07 |

#+BEGIN_SRC elisp
  (let* ((content "* Text before [[Test heading]] Text after 1

  blah blah
  ,** Text before [[Test heading]] Text after 2

  foo bar
  ,*** Text before [[Test heading]] Text after 3

  buzz

  ")
         (olp '("Text before [[Test heading]] Text after 1"
                "Text before [[Test heading]] Text after 2"
                "Text before [[Test heading]] Text after 3")))
    (with-temp-buffer
      (org-mode)
      (dotimes (_ 2000)
        (insert "* Heading 1
  text
  ,** Heading 2
  text
  ,*** Heading 3
  text
  "))
      (insert content)
      (elp-profile 10 '(org- format regexp-)
        (org-olp-marker* olp t t))))
#+END_SRC

#+RESULTS:
| Function                       | Times called |   Total time | Average time |
|--------------------------------+--------------+--------------+--------------|
| org-olp-marker*                |           10 | 0.0465095790 | 0.0046509579 |
| format                         |         2521 | 0.0013506970 | 5.357...e-07 |
| org-narrow-to-subtree          |           20 | 0.0008369790 | 4.184895e-05 |
| org-end-of-subtree             |           20 | 0.0002666620 | 1.333...e-05 |
| org-get-limited-outline-regexp |           20 | 0.0002218140 | 1.109...e-05 |
| org-back-to-heading            |           40 | 0.0001354400 | 3.386...e-06 |
| org-outline-level              |           20 |   8.1634e-05 |   4.0817e-06 |
| org-at-heading-p               |           20 | 3.409...e-05 | 1.704...e-06 |
| regexp-quote                   |           30 | 2.317...e-05 | 7.725...e-07 |
| org-with-wide-buffer           |           10 | 9.087...e-06 | 9.087...e-07 |


* Code

** Print ~org-recent-headings-list~ as an alist

#+BEGIN_SRC elisp
  (with-current-buffer (get-buffer-create "*org-recent-headings-debug*")
    (erase-buffer)
    (insert "'(")
    (--each org-recent-headings-list
      (-let (((&plist :file file :id id :outline-path olp) (car it)))
        (prin1 (a-list :file file :outline-path olp :id id) (current-buffer))
        (insert "\n")))
    (insert ")")
    (emacs-lisp-mode)
    (flycheck-mode -1)
    (goto-char (point-min))
    (indent-pp-sexp t)
    (switch-to-buffer (current-buffer)))
#+END_SRC
